/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package searchhelper;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

/**
 *
 * @author Marcus Sjolin
 */
public class SearchHelper {

    /**
     * This method performs a sequential search for strings.
     * @param stringArray
     * @param searchString
     * @return  
     */
    public static int sequentialSearch(String stringArray[], String searchString) {
        //Loop through all the items in the array if necessary.
        for (int i = 0; i < stringArray.length; i++) { //Loops from 0 to one smaller than the length of the array.
            //Check that string has been found.
            if (searchString.equalsIgnoreCase(stringArray[i])) { //Check that string has been found in the array.
                return (i); //Return message if string has been found.
            }
        }
        return -1; //If the string was not found, output resulting message.
    }

    /**
     * This method searches through an array of integers.
     * @param numberArray
     * @param searchInt
     * @return  
     */
    public static int sequentialSearch(int numberArray[], int searchInt) {
        //Loop through all the items in the array if necessary.
        for (int i = 0; i < numberArray.length; i++) { //Loop from 0 to one smaller than the length of the array.
            //Check that the integer was found.
            if (searchInt == numberArray[i]) { //Checks that the integer is equal to the current position in the search.
                return (i); //Output corresponding message if item is found.
            }
        }
        return -1; //Output corresponding message if item is never found.
    }

    /**
     * This method performs a binary search for integers.
     * @param numberArray
     * @param numberSearch
     * @return  
     */
    public static int binarySearch(int numberArray[], int numberSearch) {
        //Declare variables.
        int position = (int) (numberArray.length / 2); //Position holds the value where the current search is being performed.
        int max = numberArray.length - 1; //Stores the current maximum value of the search.
        int min = 0; //Stores the current minimum value of the search.

        //Loops while item hasn't been found and position hasn't been exceeded.
        while (numberSearch != numberArray[position] || numberArray.length < position) {
            //Checks what check method has returned and acts correspondingly. 
            if (check(numberSearch, numberArray, position) == 1) { //Check if number being searched for is bigger than the value at the current position.
                min = position; //The 'minimum' in the search becomes the last position.
            } else if (check(numberSearch, numberArray, position) == -1) { //Check if number being searched for is smaller than the value at the current position.
                max = position; //The 'maximum' value in the search becomes the last position.
            }
            position = (int) ((max - min) / 2) + min; //Change position to half way between max and min.
        }
        //Check if number being searched for has been found.
        if (numberSearch == numberArray[position]) {
            return position; //If number has been found, ouput corresponding message.
        } else {
            return -1; //If number has not been found, output -1.
        }
    }

    /**
     * This method checks whether the integer being searched for in a binary
     * search is bigger or smaller than the current position.
     * @param numberSearch
     * @param numberArray 
     * @param position
     * @return
     */
    public static int check(int numberSearch, int numberArray[], int position) {
        //Check where the number being searched for is positioned relative to the current position.
        if (numberSearch > numberArray[position]) { //Number being searched for is greater than current position.
            return 1; //Return a 1.
        } else { //Number being searched for is smaller than current position.
            return -1; //Return a -1.
        }
    }

    /**
     * This method performs a binary search for strings.
     * @param stringArray
     * @param stringSearch
     * @return
     */
    public static int binarySearch(String stringArray[], String stringSearch) {
        //Declare variables.
        int position; //Stores current position in search.
        int max = stringArray.length - 1; //Stores maximum value of search.
        int min = 0; //Stores minimum value of search.
        int counter = 0; //Stores value for a counter.
        //Infinite loop.
        while (true) {
            //Check if there are only two strings in the array.
            if (max - min == 1) {
                //If there are only two, check if it is the max position.
                if (stringArray[max].equalsIgnoreCase(stringSearch)) {
                    return max; //Return max.
                } else if (stringArray[min].equalsIgnoreCase(stringSearch)) { //If it is in the min position.
                    return min; //Return min.
                } else { 
                    return -1; //Otherwise the string does not exist in the array. Return -1.
                }
            }
            //Check if min has become greater than max.
            if (min > max) {
                return -1; //Return -1. The string does not exist in the array.
            }
            //Check if max and min have become static.
            if (counter == 2) { 
                min = min + 1; //If so, change min.
            }
      
            position = (int) ((max - min) / 2) + min; //Change postion relative to new max and min values.
            
            //Check if string has been found.
            if (stringArray[position].equalsIgnoreCase(stringSearch)) {
                return position; //Output position.
            }
            //Declare variable.
            int checkString = check(stringSearch, stringArray, position); //Holds whether string is in a bigger or smaller position.
            if (checkString == 1) { //String could be located further to the beginning of array. 
                min = position; //The minimum value is changed to the current position.
            } else if (checkString == -1) { //String could be located further to the end of the array.
                max = position; //The maximum value is changed to the current position.
            } else if (checkString == 0) { //String is smaller but the same up to a certain point than the string in the current position of the array.
                counter++; //Increase counter by 1.
            }
        }
    }

    /**
     * This method checks if a string is located further towards the max or min in an array.
     * @param stringSearch
     * @param stringArray
     * @param position
     * @return
     */
    public static int check(String stringSearch, String stringArray[], int position) {
        //Loop for the length of the item being searched for.
        for (int i = 0; i < stringSearch.length(); i++) {
            //Check so that there is no error due to the string in the array being too short.
            if (stringArray[position].length() < i + 1) {
                return 1; //Return 1.
            } else if (stringSearch.length() < i + 1) { //Check so that there is no error due to the element being searched for is shorter thant the i value plus 1.
                return -1; //Return -1.
            }
            //Check whether the string is located closer to the min or max of the array.
            if (stringArray[position].charAt(i) < stringSearch.charAt(i)) { //Check whether the string of the array is smaller.
                return 1; //Return 1.
            } else if (stringArray[position].charAt(i) > stringSearch.charAt(i)) { //Check whether the string of the array is greater.
                return -1; //Return -1.
            }
        }
        return 0; //Strings are equal to a certain point. Return 0.
    }

    /**
     * @param args the command line arguments
     * @throws IOException  
     */
    public static void main(String[] args) throws IOException {
        // TODO code application logic here
        int input = 0;

        File file = new File("dictionary.txt");
        Scanner fileScan = new Scanner(file);
        String[] arrayString = new String[3930];
        for (int i = 0; i < 3930; i++) {
            arrayString[i] = fileScan.nextLine();
        }
        
        //String[] arrayString = {"apple", "bear", "cat", "dog", "egg", "marcus", "well"};
        //System.out.println(binarySearch(arrayString, "bear"));
        //int[] numberArray = {1, 2, 4, 5, 6, 7, 29};
        //System.out.println(binarySearch(numberArray, 5));

        /*int[] intArray = new int[10];
         for (int i = 0; i < 10; i++) {
         intArray[i] = i;
         }
         System.out.println(sequentialSearch(intArray, 29));*/

    }
}
